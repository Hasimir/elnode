= elnode =

An attempt to make an emacs lisp clone of nodejs.

Apparently Steve Yegge has already done this... but I couldn't find it
so I'm writing it.


== Why elnode?? ==

It's like "hell, no". It's... well.... it's an, um, joke.


== How does it work? ==

Well... you can define a handler function:

{{{
(defun nicferrier-handler (httpcon)
  "Demonstration function"
  (elnode-http-start httpcon "200" '("Content-type" . "text/html"))
  (elnode-http-return httpcon "<html><b>HELLO!</b></html>")
  )
}}}

And then start the server:

{{{
(elnode-start 'nicferrier-handler)
}}}

You can also start the server interactively... you still have to pass
it a handler function.

== HTTP interface ==

=== headers ===

You can query headers in the HTTP request in your handler using the
function elnode-http-header:

{{{
(defun my-handler (httpcon)
  (elnode-http-header httpcon "Content-type")
  )
}}}

=== method ===

{{{
(elnode-http-method httpcon)
}}}

=== pathinfo ===

{{{
(elnode-http-pathinfo httpcon)
}}}

=== version ===

{{{
(elnode-http-version httpcon)
}}}


== Dispatching ==

Handler functions can be simple functions to respond to everything
coming into a server. It's more normal that you would have a server
that did different things on different urls so elnode provides a url
dispatcher function, you can use it like this:

{{{
  (elnode-dispatcher httpcon
                     '(("/$" . 'root-handler)
                       ("users/$" . 'users-handler))))
}}}

This seems like something people will want to do a lot so some sort of
macro seems likely in the near future.


== Calling processes ==

There is early support for calling unix processes asynchronously:

{{{
(elnode-child-process httpcon 
    "cat" "/home/nferrier/elnode/example.html"
    )
}}}

Would call the program //cat// with the HTML file as an argument. The
output of the process will be copied to the HTTP connection
asychronously (so fast).

Again, lot's of improvement needed here but this does work quite well.

== But... ==

There's always a but.

The HTTP parsing isn't very complete, we don't parse querys OR any data sent through POST.

That stuff is coming soon.

