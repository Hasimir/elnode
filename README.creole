= elnode =

An attempt to make an emacs lisp clone of nodejs.

Apparently Steve Yegge has already done this... but I couldn't find it
so I'm writing it.


== Why elnode?? ==

It's like "hell, no". It's... well.... it's an, um, joke.


== How does it work? ==

Well... you can define a handler function:

{{{
(defun nicferrier-handler (httpcon)
  "Demonstration function"
  (elnode-http-start httpcon "200" '("Content-type" . "text/html"))
  (elnode-http-return httpcon "<html><b>HELLO!</b></html>")
  )
}}}

And then start the server:

{{{
(elnode-start 'nicferrier-handler)
}}}

You can also start the server interactively... you still have to pass
it a handler function.

== HTTP interface ==

 * headers

You can query headers in the HTTP request in your handler using the
function elnode-http-header:

{{{
(defun my-handler (httpcon)
  (elnode-http-header httpcon "Content-type")
  )
}}}

 * method

{{{
(elnode-http-method httpcon)
}}}

 * pathinfo

{{{
(elnode-http-pathinfo httpcon)
}}}

 * version

{{{
(elnode-http-version httpcon)
}}}


== But... ==

There's always a but.

The HTTP parsing isn't very complete, we don't parse querys OR any data sent through POST.

That stuff is coming soon.


== ideas ==

A concept for a macro to help with multiple dispatch:

{{{
(elnode-start 
 (elnode-map 
  '(("$" 
     (elnode-http-start httpcon 200 '(Content-type . "text/html"))
     (elnode-http-return httpcon "done"))
    ("~\\([A-Za-z0-9_-]\\)"
     (elnode-send httpcon (htmlize-directory-list (string-match 1 elnode-url)))))))
}}}

There are two things defined here:
elnode-map is a macro which takes forms like:

{{{
 (url-regex-pattern body-forms)
}}}

where url-regex-pattern is an elisp regex that will match the
incomming PATHINFO and body-forms is a list of things to do when that
happens.

elnode-send is a function which sends HTML to the http con, doing
all the start and return stuff for you (and working out size of the
request)
